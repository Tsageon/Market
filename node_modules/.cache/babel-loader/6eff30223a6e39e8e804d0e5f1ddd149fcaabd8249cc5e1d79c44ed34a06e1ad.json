{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\n\n// Function to retrieve the cart from localStorage, associated with a user ID\nconst getCartFromLocalStorage = userId => {\n  const savedCart = localStorage.getItem(`cart-${userId}`);\n  return savedCart ? JSON.parse(savedCart) : [];\n};\n\n// Function to save the cart to localStorage, associated with a user ID\nconst saveCartToLocalStorage = (cart, userId) => {\n  localStorage.setItem(`cart-${userId}`, JSON.stringify(cart));\n};\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    items: [],\n    userId: null\n  },\n  reducers: {\n    setUser: (state, action) => {\n      state.userId = action.payload.userId;\n      if (state.userId) {\n        state.items = getCartFromLocalStorage(state.userId);\n      }\n    },\n    addToCart: (state, action) => {\n      if (state.userId) {\n        const {\n          id,\n          Name,\n          Description,\n          Price,\n          Quantity,\n          Image\n        } = action.payload;\n        console.log('Adding to cart:', action.payload);\n        const existingItem = state.items.find(item => item.id === id);\n        if (existingItem) {\n          existingItem.Quantity += Quantity;\n        } else {\n          state.items.push({\n            id,\n            Name,\n            Description,\n            Price,\n            Quantity,\n            Image\n          });\n        }\n        console.log('Updated cart:', state.items);\n        saveCartToLocalStorage(state.items, state.userId);\n      } else {\n        console.log('User not authenticated');\n      }\n    },\n    removeFromCart: (state, action) => {\n      if (state.userId) {\n        const updatedCart = state.items.filter(item => item.id !== action.payload);\n        console.log('Updated cart after removal:', updatedCart);\n        saveCartToLocalStorage(updatedCart, state.userId);\n        state.items = updatedCart;\n      } else {\n        console.log('User not authenticated');\n      }\n    },\n    clearCart: state => {\n      if (state.userId) {\n        console.log('Clearing cart');\n        saveCartToLocalStorage([], state.userId);\n        state.items = [];\n      } else {\n        console.log('User not authenticated');\n      }\n    }\n  }\n});\nexport const {\n  addToCart,\n  removeFromCart,\n  clearCart,\n  setUser\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","getCartFromLocalStorage","userId","savedCart","localStorage","getItem","JSON","parse","saveCartToLocalStorage","cart","setItem","stringify","cartSlice","name","initialState","items","reducers","setUser","state","action","payload","addToCart","id","Name","Description","Price","Quantity","Image","console","log","existingItem","find","item","push","removeFromCart","updatedCart","filter","clearCart","actions","reducer"],"sources":["C:/Users/Administrator/Desktop/marrket/src/Redux/cartSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\n// Function to retrieve the cart from localStorage, associated with a user ID\r\nconst getCartFromLocalStorage = (userId) => {\r\n  const savedCart = localStorage.getItem(`cart-${userId}`);\r\n  return savedCart ? JSON.parse(savedCart) : [];\r\n};\r\n\r\n// Function to save the cart to localStorage, associated with a user ID\r\nconst saveCartToLocalStorage = (cart, userId) => {\r\n  localStorage.setItem(`cart-${userId}`, JSON.stringify(cart));\r\n};\r\n\r\nconst cartSlice = createSlice({\r\n  name: 'cart',\r\n  initialState: {\r\n    items: [], \r\n    userId: null, \r\n  },\r\n  reducers: {\r\n    setUser: (state, action) => {\r\n      state.userId = action.payload.userId;\r\n      if (state.userId) {\r\n        state.items = getCartFromLocalStorage(state.userId);\r\n      }\r\n    },\r\n    addToCart: (state, action) => {\r\n      if (state.userId) {\r\n        const { id, Name, Description, Price, Quantity, Image } = action.payload;\r\n        console.log('Adding to cart:', action.payload); \r\n        const existingItem = state.items.find(item => item.id === id);\r\n        if (existingItem) {\r\n          existingItem.Quantity += Quantity;\r\n        } else {\r\n          state.items.push({ id, Name, Description, Price, Quantity, Image });\r\n        }\r\n        console.log('Updated cart:', state.items);  \r\n        saveCartToLocalStorage(state.items, state.userId);  \r\n      } else {\r\n        console.log('User not authenticated');\r\n      }\r\n    },\r\n    removeFromCart: (state, action) => {\r\n      if (state.userId) {\r\n        const updatedCart = state.items.filter(item => item.id !== action.payload);\r\n        console.log('Updated cart after removal:', updatedCart);  \r\n        saveCartToLocalStorage(updatedCart, state.userId);  \r\n        state.items = updatedCart;\r\n      } else {\r\n        console.log('User not authenticated');\r\n      }\r\n    },\r\n    clearCart: (state) => {\r\n      if (state.userId) {\r\n        console.log('Clearing cart');  \r\n        saveCartToLocalStorage([], state.userId);  \r\n        state.items = [];\r\n      } else {\r\n        console.log('User not authenticated');\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addToCart, removeFromCart, clearCart, setUser } = cartSlice.actions;\r\nexport default cartSlice.reducer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}